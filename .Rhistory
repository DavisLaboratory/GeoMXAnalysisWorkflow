usethis::use_pkgdown()
pkgdown::build_site()
.Last.error.trace
?pkgdown::build_site()
?pkgdown::build_site(example = FALSE)
pkgdown::build_site(example = FALSE)
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site_github_pages()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
pkgdown::build_site_github_pages()
pkgdown::build_site()
library(devtools)
pkgdown::build_site()
pkgdown::build_site()
#set knitr chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#load packages to avoid startup messages later in the code
library(standR)
library(SpatialExperiment)
library(limma)
library(edgeR)
library(tidyverse)
library(vissE)
library(GSEABase)
library(msigdb)
library(ggalluvial)
library(ExperimentHub)
#automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'knitr', 'rmarkdown', 'prettydoc'
), 'packages.bib')
library(ExperimentHub)
eh <- ExperimentHub()
query(eh, "standR")
countFile <- eh[["EH7364"]]
sampleAnnoFile <- eh[["EH7365"]]
featureAnnoFile <- eh[["EH7366"]]
countFile
read.csv(countFile)
read.delim(countFile, nrows = 10)[,1:5]
read.tsv(countFile, nrows = 10)[,1:5]
read.delim(countFile, nrows = 10)[,1:5]
read.delim(sampleAnnoFile, nrows = 5)[,1:8]
read.delim(sampleAnnoFile, nrows = 5)[,1:3]
read.delim(sampleAnnoFile, nrows = 5) |> colnames()
read.delim(sampleAnnoFile, nrows = 5)[,1:5]
read.delim(featureAnnoFile, nrows = 5)
?readGeoMx
spe <- readGeoMx(countFile, sampleAnnoFile, featureAnnoFile = featureAnnoFile)
spe
pkgdown::build_site()
#set knitr chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#load packages to avoid startup messages later in the code
library(standR)
library(SpatialExperiment)
library(limma)
library(edgeR)
library(tidyverse)
library(vissE)
library(GSEABase)
library(msigdb)
library(ggalluvial)
library(ExperimentHub)
#automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'knitr', 'rmarkdown', 'prettydoc'
), 'packages.bib')
library(ExperimentHub)
eh <- ExperimentHub()
query(eh, "standR")
assayNames(spe)
#set knitr chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#load packages to avoid startup messages later in the code
library(standR)
library(SpatialExperiment)
library(limma)
library(edgeR)
library(tidyverse)
library(vissE)
library(GSEABase)
library(msigdb)
library(ggalluvial)
library(ExperimentHub)
#automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'knitr', 'rmarkdown', 'prettydoc'
), 'packages.bib')
library(ExperimentHub)
eh <- ExperimentHub()
query(eh, "standR")
countFile <- eh[["EH7364"]]
sampleAnnoFile <- eh[["EH7365"]]
featureAnnoFile <- eh[["EH7366"]]
read.delim(countFile, nrows = 5)[,1:3]
read.delim(sampleAnnoFile, nrows = 5)[,1:5]
read.delim(featureAnnoFile, nrows = 5)
spe <- readGeoMx(countFile, sampleAnnoFile, featureAnnoFile = featureAnnoFile)
spe
assayNames(spe)
plotSampleInfo(spe, column2plot = c("SlideName","disease_status","region","SegmentLabel","pathology"))
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel)
#set knitr chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#load packages to avoid startup messages later in the code
library(standR)
library(SpatialExperiment)
library(limma)
library(edgeR)
library(tidyverse)
library(vissE)
library(GSEABase)
library(msigdb)
library(ggalluvial)
library(ExperimentHub)
#automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'knitr', 'rmarkdown', 'prettydoc'
), 'packages.bib')
library(ExperimentHub)
eh <- ExperimentHub()
query(eh, "standR")
countFile <- eh[["EH7364"]]
sampleAnnoFile <- eh[["EH7365"]]
featureAnnoFile <- eh[["EH7366"]]
read.delim(countFile, nrows = 5)[,1:3]
read.delim(sampleAnnoFile, nrows = 5)[,1:5]
read.delim(featureAnnoFile, nrows = 5)
library(standR)
spe <- readGeoMx(countFile, sampleAnnoFile, featureAnnoFile = featureAnnoFile)
spe
assayNames(spe)
assay(spe, "counts")[1:5,1:5]
assay(spe, "logcounts")[1:5,1:5]
colData(spe)
rowData(spe)
metadata(spe)$NegProbes[1:5,1:5]
dge <- edgeR::SE2DGEList(spe)
spe2 <- readGeoMxFromDGE(dge)
spe2
plotSampleInfo(spe, column2plot = c("SlideName","disease_status","region","SegmentLabel","pathology"))
paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel)
paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel) %>%
gsub("_Geometric Segment","",.))
paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel) %>%
gsub("_Geometric Segment","",.)
paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel) %>%
gsub("_Geometric Segment","",.) %>%
paste0("_",colData(spe)$pathology) %>%
gsub("_NA","_ns",.)
paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel) %>%
gsub("_Geometric Segment","",.) %>%
paste0("_",colData(spe)$pathology) %>%
gsub("_NA","_ns",.) %>% table()
paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel) %>%
gsub("_Geometric Segment","",.) %>%
paste0("_",colData(spe)$pathology) %>%
gsub("_NA","",.) %>% table()
colData(spe)$regions <- paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel) %>%
gsub("_Geometric Segment","",.) %>%
paste0("_",colData(spe)$pathology) %>%
gsub("_NA","",.)
plotSampleInfo(spe, column2plot = c("SlideName","disease_status","regions"))
colData(spe)$regions %>% table()
?list.files
list.files(".", recursive = T)
?readGeoMx
#set knitr chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#load packages to avoid startup messages later in the code
library(standR)
library(SpatialExperiment)
library(limma)
library(edgeR)
library(tidyverse)
library(vissE)
library(GSEABase)
library(msigdb)
library(ggalluvial)
library(ExperimentHub)
#automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'knitr', 'rmarkdown', 'prettydoc'
), 'packages.bib')
library(ExperimentHub)
eh <- ExperimentHub()
query(eh, "standR")
countFile <- eh[["EH7364"]]
sampleAnnoFile <- eh[["EH7365"]]
featureAnnoFile <- eh[["EH7366"]]
read.delim(countFile, nrows = 5)[,1:3]
read.delim(sampleAnnoFile, nrows = 5)[,1:5]
read.delim(featureAnnoFile, nrows = 5)
library(standR)
spe <- readGeoMx(countFile, sampleAnnoFile, featureAnnoFile = featureAnnoFile)
spe
assayNames(spe)
assay(spe, "counts")[1:5,1:5]
assay(spe, "logcounts")[1:5,1:5]
colData(spe)
rowData(spe)
metadata(spe)$NegProbes[,1:5]
dge <- edgeR::SE2DGEList(spe)
spe2 <- readGeoMxFromDGE(dge)
spe2
plotSampleInfo(spe, column2plot = c("SlideName","disease_status","region","SegmentLabel","pathology"))
colData(spe)$regions <- paste0(colData(spe)$region,"_",colData(spe)$SegmentLabel) %>%
gsub("_Geometric Segment","",.) %>%
paste0("_",colData(spe)$pathology) %>%
gsub("_NA","",.)
colData(spe)$regions %>% table()
plotSampleInfo(spe, column2plot = c("SlideName","disease_status","regions"))
spe <- addPerROIQC(spe, rm_genes = TRUE)
dim(spe)
metadata(spe) |> names()
plotGeneQC(spe, ordannots = "regions", col = regions, point_size = 2)
plotROIQC(spe, y_threshold = 50000, col = SlideName)
plotRLExpr(spe)
plotRLExpr(spe, ordannots = "SlideName", assay = 2, col = SlideName)
drawPCA(spe, assay = 2, col = SlideName, shape = regions)
drawPCA(spe, assay = 2, col = disease_status, shape = regions)
plotScreePCA(spe, assay = 2, dims = 10)
plotPairPCA(spe, col = disease_status,
shape = regions, assay = 2, n_dimension = 4)
plotPCAbiplot(spe, n_loadings = 10, assay = 2, col = regions)
standR::plotMDS(spe, assay = 2, color = disease_status, shape = regions)
spe <- scater::runUMAP(spe)
plotDR(spe, dimred = "UMAP", col = regions)
colData(spe)$biology <- paste0(colData(spe)$disease_status, "_", colData(spe)$regions)
spe_tmm <- geomxNorm(spe, method = "TMM")
plotRLExpr(spe_tmm, assay = 2, color = SlideName) + ggtitle("TMM")
plotPairPCA(spe_tmm, assay = 2, color = disease_status, shape = regions)
spe <- findNCGs(spe, batch_name = "SlideName", top_n = 300)
metadata(spe) |> names()
for(i in seq(5)){
spe_ruv <- geomxBatchCorrection(spe, factors = "biology",
NCGs = metadata(spe)$NCGs, k = i)
print(plotPairPCA(spe_ruv, assay = 2, n_dimension = 4, color = disease_status, shape = regions, title = paste0("k = ", i)))
}
spe_ruv <- geomxBatchCorrection(spe, factors = "biology",
NCGs = metadata(spe)$NCGs, k = 4)
plotPairPCA(spe_ruv, assay = 2, color = disease_status, shape = regions, title = "RUV4, k = 4", n_dimension = 4)
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ 0 + disease_status + regions,
data = colData(spe)))
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
spe_list <- list(spe, spe_ruv, spe_lrb)
plotClusterEvalStats(spe_list = spe_list,
bio_feature_name = "regions",
batch_feature_name = "SlideName",
data_names = c("Raw","RUV4","Limma"))
#set knitr chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#load packages to avoid startup messages later in the code
library(standR)
library(SpatialExperiment)
library(limma)
library(edgeR)
library(tidyverse)
library(vissE)
library(GSEABase)
library(msigdb)
library(ggalluvial)
library(ExperimentHub)
#automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'knitr', 'rmarkdown', 'prettydoc'
), 'packages.bib')
library(ExperimentHub)
eh <- ExperimentHub()
query(eh, "standR")
countFile <- eh[["EH7364"]]
sampleAnnoFile <- eh[["EH7365"]]
featureAnnoFile <- eh[["EH7366"]]
read.delim(countFile, nrows = 5)[,1:3]
read.delim(sampleAnnoFile, nrows = 5)[,1:5]
read.delim(featureAnnoFile, nrows = 5)
library(standR)
spe <- readGeoMx(countFile, sampleAnnoFile, featureAnnoFile = featureAnnoFile)
spe
colData(spe)
colData(spe)$LOQ < 2
table(colData(spe)$LOQ < 2)
?readGeoMx
colSums(assay(spe,1))
assay(spe, 1) > colData(spe)$LOQ
table(assay(spe, 1) > colData(spe)$LOQ)
colSums(assay(spe, 1) > colData(spe)$LOQ)
colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe)
colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe) %>% hist()
colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe) %>% as.data.frame()
colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe)
colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe) %>% as_tibble()
colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe) %>% as.matrix()
data.frame(detectionRate = colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe))
data.frame(detectionRate = colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe)) %>% ggplot(aes(detectionRate)) + geom_histogram()
spe <- addPerROIQC(spe, rm_genes = TRUE)
data.frame(detectionRate = colSums(assay(spe, 2) > metadata(spe)$lcpm_threshold/nrow(spe)) %>% ggplot(aes(detectionRate)) + geom_histogram()
data.frame(detectionRate = colSums(assay(spe, 2) > metadata(spe)$lcpm_threshold)/nrow(spe)) %>% ggplot(aes(detectionRate)) + geom_histogram()
data.frame(detectionRate = colSums(assay(spe, 1) > colData(spe)$LOQ)/nrow(spe)) %>% ggplot(aes(detectionRate)) + geom_histogram()
metadata(spe)$negProbes
metadata(spe)
metadata(spe) %>% names()
metadata(spe)$NegProbes
metadata(spe)$NegProbes %>% hist()
metadata(spe)$NegProbes %>% t
metadata(spe)$NegProbes %>% t %>% .$NegProbe-WTX %>% summary()
metadata(spe)$NegProbes %>% t %>% ggplot(aes(NegProbe-WTX)) + geom_histogram()
metadata(spe)$NegProbes %>% t  %>% as.data.frame() %>% ggplot(aes(NegProbe-WTX)) + geom_histogram()
metadata(spe)$NegProbes %>% t  %>% as.data.frame() %>% ggplot(aes(`NegProbe-WTX`)) + geom_histogram()
metadata(spe)$NegProbes %>% t  %>% as.data.frame() %>% ggplot(aes(`NegProbe-WTX`)) + geom_histogram() + geom_vline(xintercept = 2)
