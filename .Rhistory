plotRLExpr(spe)
plotRLExpr(spe, ordannots = "SlideName", assay = 2, color = SlideName)
plotRLExpr(spe, ordannots = "Type", assay = 2, color = Type)
drawPCA(spe, assay = 2, color = Type)
set.seed(100)
spe <- scater::runPCA(spe)
pca_results <- reducedDim(spe, "PCA")
drawPCA(spe, precomputed = pca_results, col = Type)
drawPCA(spe, precomputed = pca_results, col = SlideName)
plotScreePCA(spe, precomputed = pca_results)
plotPairPCA(spe, col = Type, precomputed = pca_results, n_dimension = 4)
plotPairPCA(spe, col = SlideName, precomputed = pca_results, n_dimension = 4)
plotPCAbiplot(spe, n_loadings = 10, precomputed = pca_results, col = Type)
standR::plotMDS(spe, assay = 2, color = Type)
set.seed(100)
spe <- scater::runUMAP(spe, dimred = "PCA")
plotDR(spe, dimred = "UMAP", col = Type)
plotDR(spe, dimred = "UMAP", col = SlideName)
spe_tmm <- geomxNorm(spe, method = "TMM")
plotRLExpr(spe_tmm, assay = 2, color = SlideName) + ggtitle("TMM")
set.seed(100)
spe_tmm <- scater::runPCA(spe_tmm)
pca_results_tmm <- reducedDim(spe_tmm, "PCA")
plotPairPCA(spe_tmm, precomputed = pca_results_tmm, color = Type)
plotPairPCA(spe_tmm, precomputed = pca_results_tmm, color = SlideName)
spe <- findNCGs(spe, batch_name = "SlideName", top_n = 300)
metadata(spe) |> names()
for(i in seq(5)){
spe_ruv <- geomxBatchCorrection(spe, factors = "Type",
NCGs = metadata(spe)$NCGs, k = i)
print(plotPairPCA(spe_ruv, assay = 2, n_dimension = 4, color = Type, title = paste0("k = ", i)))
}
spe_ruv <- geomxBatchCorrection(spe, factors = "Type",
NCGs = metadata(spe)$NCGs, k = 2)
set.seed(100)
spe_ruv <- scater::runPCA(spe_ruv)
pca_results_ruv <- reducedDim(spe_ruv, "PCA")
plotPairPCA(spe_ruv, precomputed = pca_results_ruv, color = Type, title = "RUV4, k = 2", n_dimension = 4)
plotPairPCA(spe_ruv, precomputed = pca_results_ruv, color = SlideName, title = "RUV4, k = 2", n_dimension = 4)
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~Type, data = colData(spe))[,-1])
plotPairPCA(spe_lrb, assay = 2, color = Type, title = "Limma removeBatch")
plotPairPCA(spe_lrb, assay = 2, color = SlideName, title = "Limma removeBatch")
spe_list <- list(spe, spe_ruv, spe_lrb)
plotClusterEvalStats(spe_list = spe_list,
bio_feature_name = "Type",
batch_feature_name = "SlideName",
data_names = c("Raw","RUV4","Limma"))
plotRLExpr(spe_ruv, assay = 2, color = SlideName) + ggtitle("RUV4")
plotRLExpr(spe_lrb, assay = 2, color = SlideName) + ggtitle("Limma removeBatch")
colData(spe_ruv)[,seq(ncol(colData(spe_ruv))-1, ncol(colData(spe_ruv)))] |>
head()
library(edgeR)
library(limma)
dge <- SE2DGEList(spe_ruv)
design <- model.matrix(~0 + Type + ruv_W1 + ruv_W2 , data = colData(spe_ruv))
colnames(design)
colnames(design) <- gsub("^Type","",colnames(design))
colnames(design) <- gsub(" ","_",colnames(design))
colnames(design)
contr.matrix <- makeContrasts(
BvT = B_cell_zone - T_cell_zone,
levels = colnames(design))
keep <- filterByExpr(dge, design)
table(keep)
rownames(dge)[!keep]
dge_all <- dge[keep, ]
dge_all <- estimateDisp(dge_all, design = design, robust = TRUE)
plotBCV(dge_all, legend.position = "topleft", ylim = c(0, 1.3))
bcv_df <- data.frame(
'BCV' = sqrt(dge_all$tagwise.dispersion),
'AveLogCPM' = dge_all$AveLogCPM,
'gene_id' = rownames(dge_all)
)
highbcv <- bcv_df$BCV > 0.8
highbcv_df <- bcv_df[highbcv, ]
points(highbcv_df$AveLogCPM, highbcv_df$BCV, col = "red")
text(highbcv_df$AveLogCPM, highbcv_df$BCV, labels = highbcv_df$gene_id, pos = 4)
v <- voom(dge_all, design, plot = TRUE)
fit <- lmFit(v)
fit_contrast <- contrasts.fit(fit, contrasts = contr.matrix)
efit <- eBayes(fit_contrast, robust = TRUE)
results_efit<- decideTests(efit, p.value = 0.05)
summary_efit <- summary(results_efit)
summary_efit
library(ggrepel)
library(tidyverse)
de_results_BvT <- topTable(efit, coef = 1, sort.by = "P", n = Inf)
de_genes_toptable_BvT <- topTable(efit, coef = 1, sort.by = "P", n = Inf, p.value = 0.05)
de_results_BvT %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
ggplot(aes(AveExpr, logFC, col = DE)) +
geom_point(shape = 1, size = 1) +
geom_text_repel(data = de_genes_toptable_BvT %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
rownames_to_column(), aes(label = rowname)) +
theme_bw() +
xlab("Average log-expression") +
ylab("Log-fold-change") +
ggtitle("B cell zone vs. T cell zone in Lymph node (limma-voom)") +
scale_color_manual(values = c("blue","gray","red")) +
theme(text = element_text(size=15))
library(DT)
updn_cols <- c(RColorBrewer::brewer.pal(6, 'Greens')[2], RColorBrewer::brewer.pal(6, 'Purples')[2])
de_genes_toptable_BvT %>%
dplyr::select(c("logFC", "AveExpr", "P.Value", "adj.P.Val")) %>%
DT::datatable(caption = 'B cell zone vs. T cell zone in Lymph node (limma-voom)') %>%
DT::formatStyle('logFC',
valueColumns = 'logFC',
backgroundColor = DT::styleInterval(0, rev(updn_cols))) %>%
DT::formatSignif(1:4, digits = 4)
library(msigdb)
library(GSEABase)
msigdb_hs <- getMsigdb(version = '7.2')
msigdb_hs <- appendKEGG(msigdb_hs)
sc <- listSubCollections(msigdb_hs)
gsc <- c(subsetCollection(msigdb_hs, c('h')),
subsetCollection(msigdb_hs, 'c2', sc[grepl("^CP:",sc)]),
subsetCollection(msigdb_hs, 'c5', sc[grepl("^GO:",sc)])) %>%
GeneSetCollection()
fry_indices <- ids2indices(lapply(gsc, geneIds), rownames(v), remove.empty = FALSE)
names(fry_indices) <- sapply(gsc, setName)
gsc_category <- sapply(gsc, function(x) bcCategory(collectionType(x)))
gsc_category <- gsc_category[sapply(fry_indices, length) > 5]
gsc_subcategory <- sapply(gsc, function(x) bcSubCategory(collectionType(x)))
gsc_subcategory <- gsc_subcategory[sapply(fry_indices, length) > 5]
fry_indices <- fry_indices[sapply(fry_indices, length) > 5]
names(gsc_category) = names(gsc_subcategory) = names(fry_indices)
fry_indices_cat <- split(fry_indices, gsc_category[names(fry_indices)])
fry_res_out <- lapply(fry_indices_cat, function (x) {
limma::fry(v, index = x, design = design, contrast = contr.matrix[,1], robust = TRUE)
})
post_fry_format <- function(fry_output, gsc_category, gsc_subcategory){
names(fry_output) <- NULL
fry_output <- do.call(rbind, fry_output)
fry_output$GenesetName <- rownames(fry_output)
fry_output$GenesetCat <- gsc_category[rownames(fry_output)]
fry_output$GenesetSubCat <- gsc_subcategory[rownames(fry_output)]
return(fry_output)
}
fry_res_sig <- post_fry_format(fry_res_out, gsc_category, gsc_subcategory) %>%
as.data.frame() %>%
filter(FDR < 0.05)
fry_res_sig %>%
arrange(FDR) %>%
filter(Direction == "Up") %>%
.[seq(20),] %>%
mutate(GenesetName = factor(GenesetName, levels = .$GenesetName)) %>%
ggplot(aes(GenesetName, -log(FDR))) +
geom_bar(stat = "identity", fill = "red") +
theme_bw() +
coord_flip() +
ggtitle("Up-regulated")
fry_res_sig %>%
arrange(FDR) %>%
filter(Direction == "Down") %>%
.[seq(20),] %>%
mutate(GenesetName = factor(GenesetName, levels = .$GenesetName)) %>%
ggplot(aes(GenesetName, -log(FDR))) +
geom_bar(stat = "identity", fill = "blue") +
theme_bw() +
coord_flip() +
ggtitle("Down-regulated")
library(vissE)
library(igraph)
dovissE <- function(fry_out, de_table, topN = 6, title = "", specific_clusters = NA){
n_row = min(1000, nrow(fry_out))
gs_sig_name <- fry_out %>%
filter(FDR < 0.05) %>%
arrange(FDR) %>%
.[1:n_row,] %>%
rownames()
gsc_sig <- gsc[gs_sig_name,]
gs_ovlap <- computeMsigOverlap(gsc_sig, thresh = 0.15)
gs_ovnet <- computeMsigNetwork(gs_ovlap, gsc)
gs_stats <- -log10(fry_out[gs_sig_name,]$FDR)
names(gs_stats) <- gs_sig_name
#identify clusters
grps = cluster_walktrap(gs_ovnet)
#extract clustering results
grps = groups(grps)
#sort by cluster size
grps = grps[order(sapply(grps, length), decreasing = TRUE)]
# write output
output_clusters <- list()
for(i in seq(length(grps))){
output_clusters[[i]] <- data.frame(geneset = grps[[i]], cluster = paste0("cluster",names(grps)[i]))
}
output_clusters <<- output_clusters %>% bind_rows()
if(is.na(specific_clusters)){
grps <- grps[1:topN]
} else {
grps <- grps[specific_clusters %>% as.character()]
}
#plot the top 12 clusters
set.seed(36) #set seed for reproducible layout
p1 <<- plotMsigNetwork(gs_ovnet, markGroups = grps,
genesetStat = gs_stats, rmUnmarkedGroups = TRUE) +
scico::scale_fill_scico(name = "-log10(FDR)")
p2 <<- plotMsigWordcloud(gsc, grps, type = 'Name')
genes <- unique(unlist(geneIds(gsc_sig)))
genes_logfc <- de_table %>% rownames_to_column() %>% filter(rowname %in% genes) %>% .$logFC
names(genes_logfc) <- de_table %>% rownames_to_column() %>% filter(rowname %in% genes) %>% .$rowname
p3 <<- plotGeneStats(genes_logfc, gsc, grps) +
geom_hline(yintercept = 0, colour = 2, lty = 2) +
ylab("logFC")
#p4 <- plotMsigPPI(ppi, gsc, grps[1:topN], geneStat = genes_logfc) +
#  guides(col=guide_legend(title="logFC"))
print(p2 + p1 + p3 + patchwork::plot_layout(ncol = 3) +
patchwork::plot_annotation(title = title))
}
dovissE(fry_res_sig, de_genes_toptable_BvT, topN = 9, title = "B cell zone vs. T cell zone in Lymph node." )
sessionInfo()
library(SpatialDecon)
?prepareSpatialDecon
metadata(spe)
names(metadata(spe))
metadata(spe)$NegProbes
prepareSpatialDecon(spe)
spe <- readGeoMx(countFile, sampleAnnoFile, featureAnnoFile, rmNegProbe = FALSE)
prepareSpatialDecon(spe)
spd <- prepareSpatialDecon(spe)
data("safeTME")
heatmap(sweep(safeTME, 1, apply(safeTME, 1, max), "/"),
labRow = NA, margins = c(10, 5))
spd
res <- spatialdecon(norm = spd$normCount,
bg = spd$backGround,
X = safeTME,
align_genes = TRUE)
res
res$X
res$prop_of_all
res$prop_of_nontumor
res$prop_of_nontumor == res$prop_of_all
all(res$prop_of_nontumor == res$prop_of_all)
res$prop_of_all
res$prop_of_all %>%
class()
res$prop_of_all %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct)
res$prop_of_all %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
ggplot(aes(samples, prop, fill = ct)) +
geom_bar(stat = "identity", position = "stack")
colnames(spe)
res$prop_of_all %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
filter(grepl("6B",samples)) %>%
ggplot(aes(samples, prop, fill = ct)) +
geom_bar(stat = "identity", position = "stack")
res$prop_of_all %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
filter(grepl("6B",samples)) %>%
ggplot(aes(samples, prop, fill = ct)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip()
res$prop_of_all %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
filter(grepl("6B",samples)) %>%
ggplot(aes(samples, prop, fill = ct)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
res$prop_of_all %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
filter(grepl("6B",samples)) %>%
ggplot(aes(samples, prop, fill = ct)) +
geom_bar(stat = "identity", position = "stack", color = "black") +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
res$prop_of_all %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
filter(grepl("6B",samples)) %>%
ggplot(aes(samples, prop, fill = ct)) +
geom_bar(stat = "identity", position = "stack", color = "black") +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
res$prop_of_all %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
filter(grepl("6B",samples)) %>%
ggplot(aes(samples, prop, fill = ct)) +
geom_bar(stat = "identity", position = "stack", color = "black", width = .7) +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
library(speckle)
convertDataToList <- function(x, data.type=c("proportions","counts"), transform=NULL,
scale.fac=NULL)
# Author Belinda Phipson
# Data 06/06/2022
# Convert to list object that propeller expects in propeller.ttest and propeller.anova
{
type <- match.arg(data.type,c("proportions","counts"))
x <- as.matrix(x)
# scale.fac is total num cells parameter N for each sample
if(is.null(scale.fac)) scale.fac <- 5000
scale.fac <- edgeR::expandAsMatrix(scale.fac,dim=dim(x), byrow=TRUE)
if(type=="proportions"){
if(transform=="asin"){
message("Performing arcsin square root transformation of proportions")
prop.trans <- t(asin(sqrt(x)))
}
else if(transform=="logit"){
message("Performing logit transformation of proportions")
tab <- t(x*scale.fac)
props <- tab/rowSums(tab)
props.pseudo <- (tab+0.5)/rowSums(tab+0.5)
prop.trans <- log(props.pseudo/(1-props.pseudo))
}
list(Counts=x*scale.fac, TransformedProps=t(prop.trans), Proportions=x)
}
else if(type=="counts"){
tab <- t(x)
props <- tab/rowSums(tab)
if(transform=="asin"){
message("Performing arcsin square root transformation of proportions")
prop.trans <- asin(sqrt(props))
}
else if(transform=="logit"){
message("Performing logit transformation of proportions")
props.pseudo <- (tab+0.5)/rowSums(tab+0.5)
prop.trans <- log(props.pseudo/(1-props.pseudo))
}
list(Counts=t(tab), TransformedProps=t(prop.trans), Proportions=t(props))
}
else message("invalid data type")
}
ct.hlca <- readRDS(here("/stornext/General/data/academic/lab_davis/NingLiu/nsclc/data/nsclc_deconvolution_HLCA.rds"))
library(here)
ct.hlca <- readRDS(here("/stornext/General/data/academic/lab_davis/NingLiu/nsclc/data/nsclc_deconvolution_HLCA.rds"))
ct.hlca <- t(ct.hlca[,1:25])
targets.stroma <- readRDS(here("/stornext/General/data/academic/lab_davis/NingLiu/nsclc/data/propeller_sampleInfo_stroma_all.rds"))
ct.luca <- readRDS(here("/stornext/General/data/academic/lab_davis/NingLiu/nsclc/data/nsclc_deconvolution_luca.rds"))
ct.luca <- t(ct.luca[,1:24])
targets.tumour <-  readRDS(here("/stornext/General/data/academic/lab_davis/NingLiu/nsclc/data/propeller_sampleInfo_tumour_all.rds"))
# Check proportions add to 1
colSums(ct.luca)
colSums(ct.hlca)
# Separate stroma and tumour
# use luCA for stroma analysis too.
# Nah, using HLCA for stroma -- Ning
#ct.stroma <- ct.luca[,grep("Stroma",colnames(ct.luca))]
ct.stroma <- ct.hlca[,grep("Stroma",colnames(ct.hlca))]
ct.tumour <- ct.luca[,grep("Tumour",colnames(ct.luca))]
# Check for cell types with all zero proportions
table(rowSums(ct.stroma)==0)
which(rowSums(ct.stroma)==0)
table(rowSums(ct.tumour)==0)
which(rowSums(ct.tumour)==0)
ct.stroma.keep <- ct.stroma[rowSums(ct.stroma)!=0,]
ct.tumour.keep <- ct.tumour[rowSums(ct.tumour)!=0,]
dim(ct.stroma.keep)
dim(ct.tumour.keep)
ct.stroma.keep
colData(spe)
colData(spe)$Type
colData(spe)$Type == "T cell zone"
colnames(spe)[colData(spe)$Type == "T cell zone"]
samples_t_cell_zone <- colnames(spe)[colData(spe)$Type == "T cell zone"]
res$prop_of_all[,samples_t_cell_zone]
t_cell_zone_samples_prop <- res$prop_of_all[,samples_t_cell_zone]
colData(spe)[t_cell_zone_samples_prop,]$AOINucleiCount
colData(spe)$AOINucleiCount
spe_sub <- spe[,t_cell_zone_samples_prop]
t_cell_zone_samples_prop
spe_sub <- spe[,samples_t_cell_zone]
spe_sub
propslist <- convertDataToList(t_cell_zone_samples_prop, data.type = c("proportions"), transform="asin",scale.fac=colData(spe_sub)$AOINucleiCount)
propslist
propslist %>% names()
design <- model.matrix(~ 0 + Type, colData(spe_sub))
design <- model.matrix(~ 0 + Type, data = as.data.frame(colData(spe_sub)))
colData(spe_sub)
design <- model.matrix(~ 0 + SlideName, data = as.data.frame(colData(spe_sub)))
head(design)
coldata(spe_sub)$SlideName %>% table()
colData(spe_sub)$SlideName %>% table()
colnames(design) <- str_remove(colnames(design), pattern = "SlideName")
design <- model.matrix(~ 0 + SlideName, data = as.data.frame(colData(spe_sub)))
colnames(design) <- str_remove(colnames(design), pattern = "SlideNamehu_lymph_node_")
colnames(design)
samples_subset <- colnames(spe)[colData(spe)$Type %in%  c("T cell zone", "B cell zone")]
subset_prop <- res$prop_of_all[,samples_t_cell_zone]
spe_sub <- spe[,samples_subset]
propslist <- convertDataToList(subset_prop,
data.type = c("proportions"),
transform="asin",
scale.fac=colData(spe_sub)$AOINucleiCount)
subset_prop
subset_prop %>% dim()
spe_sub
subset_prop <- res$prop_of_all[,samples_subset]
propslist <- convertDataToList(subset_prop,
data.type = c("proportions"),
transform="asin",
scale.fac=colData(spe_sub)$AOINucleiCount)
design <- model.matrix(~ 0 + Type, data = as.data.frame(colData(spe_sub)))
colnames(design)
colnames(design) <- str_remove(colnames(design), pattern = "Type") %>%
str_replace_all(., " ", "_")
colnames(design)
contr <- makeContrasts(B_cell_zone - T_cell_zone,levels=design)
contr
propeller.ttest(propslist, design, contr, robust=TRUE,trend=FALSE, sort=TRUE)
outs <- propeller.ttest(propslist, design, contr, robust=TRUE,trend=FALSE, sort=TRUE)
outs
outs %>% filter(FDR < 0.05)
diff_ct <- outs %>%
filter(FDR < 0.05) %>%
rownames()
subset_prop
subset_prop[diff_ct,]
subset_prop[diff_ct,] %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct)
subset_prop[diff_ct,] %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct)
colData(spe_sub)
subset_prop[diff_ct,] %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
left_join(as.data.frame(colData(spe_sub)), by = c("samples"="SegmentLabel"))
subset_prop[diff_ct,] %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
left_join(as.data.frame(colData(spe_sub)), by = c("samples"="SegmentLabel")) %>%
ggplot(aes(Type, prop, fill = ct)) +
geom_violin() +
facet_wrap(~ct) +
theme_bw()
subset_prop[diff_ct,] %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
left_join(as.data.frame(colData(spe_sub)), by = c("samples"="SegmentLabel")) %>%
.$Type
subset_prop[diff_ct,] %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
left_join(as.data.frame(colData(spe_sub)), by = c("samples"="SegmentLabel"))
colData(spe_sub)$SegmentLabel
colData(spe_sub)
colData(spe_sub)$sample_id
colData(spe_sub)$samples_id <- rownames(colData(spe_sub))
subset_prop[diff_ct,] %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
left_join(as.data.frame(colData(spe_sub)), by = c("samples"="samples_id"))
subset_prop[diff_ct,] %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
left_join(as.data.frame(colData(spe_sub)), by = c("samples"="samples_id")) %>%
ggplot(aes(Type, prop, fill = ct)) +
geom_violin() +
facet_wrap(~ct) +
theme_bw()
design <- model.matrix(~ 0 + Type + SlideName, data = as.data.frame(colData(spe_sub)))
colnames(design) <- str_remove(colnames(design), pattern = "Type") %>%
str_replace_all(., " ", "_")
contr <- makeContrasts(B_cell_zone - T_cell_zone,levels=design)
outs <- propeller.ttest(propslist, design, contr, robust=TRUE,trend=FALSE, sort=TRUE)
diff_ct <- outs %>%
filter(FDR < 0.05) %>%
rownames()
colData(spe_sub)$samples_id <- rownames(colData(spe_sub))
subset_prop[diff_ct,] %>%
as.data.frame() %>%
rownames_to_column("ct") %>%
gather(samples, prop, -ct) %>%
left_join(as.data.frame(colData(spe_sub)), by = c("samples"="samples_id")) %>%
ggplot(aes(Type, prop, fill = ct)) +
geom_violin() +
facet_wrap(~ct) +
theme_bw()
res$prop_of_all
d <- dist(res$prop_of_all)
hc <- hclust(d)
?hclust
plot(hc)
d <- dist(t(res$prop_of_all))
hc <- hclust(d)
plot(hc)
