spe_list <- list(spe, spe_ruv, spe_lrb)
plotClusterEvalStats(spe_list = spe_list,
bio_feature_name = "regions",
batch_feature_name = "SlideName",
data_names = c("Raw","RUV4","Limma"))
seq(ncol(spe_tmm)-4:ncol(spe_tmm))
seq(ncol(spe_tmm)-4,ncol(spe_tmm))
ncol(spe_tmm)-4:ncol(spe_tmm)
mylast(spe_tmm)
seq(ncol(spe_tmm)-4,ncol(spe_tmm))
colData(spe_ruv)[,seq(ncol(spe_tmm)-4,ncol(spe_tmm))]
colData(spe_ruv)[,seq(ncol(colData(spe_ruv))-4, ncol(colData(spe_ruv)))]
colData(spe_ruv)[,seq(ncol(colData(spe_ruv))-3, ncol(colData(spe_ruv)))]
colData(spe_ruv)[,seq(ncol(colData(spe_ruv))-3, ncol(colData(spe_ruv)))] |> head()
?voom
dge
?DGEList
?model.matrix
dge <- SE2DGEList(spe_ruv)
dge$samples$disease_status
dge$samples$regions
dge$samples$regions %>% unique()
design <- model.matrix(~0 + biology + ruv_W1 + ruv_W2 + ruv_W3 + ruv_W4, data = colData(spe_ruv))
colnames(design)
?gsub
?design.matrix
colnames(design)
colnames(design) <- gsub("^biology","",colnames(design))
colnames(design)
?makeContrasts
keep <- filterByExpr(dge, design)
table(keep)
dge_all <- dge[keep, ]
v <- voom(dge_all, design)
colData(spe_tmm)
plotPairPCA(spe_ruv, assay = 2, color = slide_name, title = "RUV4, k = 4", n_dimension = 4)
plotPairPCA(spe_ruv, assay = 2, color = SlideName, title = "RUV4, k = 4", n_dimension = 4)
plotPairPCA(spe_lrb, assay = 2, color = SlideName, title = "Limma removeBatch", n_dimension = 4)
plotPairPCA(spe_lrb, assay = 2, color = SlideName, title = "Limma removeBatch", n_dimension = 4)
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ biology,
data = colData(spe))[,-1])
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ disease_status:regions,
data = colData(spe))[,-1])
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ biology,
data = colData(spe))[,-1])
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ biology,
data = colData(spe)))
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ 0 + biology,
data = colData(spe)))
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ disease_status + regions,
data = colData(spe)))
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ disease_status + regions,
data = colData(spe))[-1])
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ disease_status + regions,
data = colData(spe))[,-1])
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ 0 + disease_status + regions,
data = colData(spe)))
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ 0 + biology,
data = colData(spe)))
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~ 0 + biology,
data = colData(spe))[,-1])
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~biology,
data = colData(spe))[,-1])
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
plotRLExpr(spe_ruv, assay = 2, color = SlideName) + ggtitle("RUV4")
plotRLExpr(spe_lrb, assay = 2, color = SlideName) + ggtitle("Limma removeBatch")
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~biology,
data = colData(spe)))
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~colData(spe)$biology))
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
batch_matrix <- model.matrix(~0+ SlideName + biology, data = colData(spe))
batch_matrix
colnames(batch_matrix)
batch_matrix <- batch_matrix[,seq(8,ncol(batch_matrix))]
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = batch_matrix)
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
genotype <- factor(c(1,1,1,1,2,2,2,2))
treatment <- factor(c(1,2,1,2,1,2,1,2))
batch <- factor(c(1,1,2,2,3,3,4,4))
design <- model.matrix(~0 + batch + genotype:treatment)
colnames(design)
colnames(design[,-(5:6)])
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~disease_status + regions))
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~disease_status + regions,
data = colData(spe)))
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~disease_status + regions,
data = colData(spe))[,-1])
plotPairPCA(spe_lrb, assay = 2, color = disease_status, shape = regions, title = "Limma removeBatch", n_dimension = 4)
spe_lrb <- geomxBatchCorrection(spe,
batch = colData(spe)$SlideName, method = "Limma",
design = model.matrix(~disease_status + regions,
data = colData(spe))[,-1])
spe_list <- list(spe, spe_ruv, spe_lrb)
plotClusterEvalStats(spe_list = spe_list,
bio_feature_name = "regions",
batch_feature_name = "SlideName",
data_names = c("Raw","RUV4","Limma"))
colnames(design) <- gsub("^biology","",colnames(design))
colnames(design)
design <- model.matrix(~0 + biology + ruv_W1 + ruv_W2 + ruv_W3 + ruv_W4, data = colData(spe_ruv))
colnames(design)
colnames(design) <- gsub("^biology","",colnames(design))
colnames(design)
contr.matrix <- makeContrasts(
DvCinGab = DKD_glomerulus_abnormal - DKD_tubule_neg,
levels = colnames(design))
keep <- filterByExpr(dge, design)
table(keep)
dge_all <- dge[keep, ]
dge_all <- estimateDisp(dge_all, design, robust=TRUE)
v <- voom(dge_all, design)
fit <- lmFit(v)
fit_contrast <- contrasts.fit(fit, contrasts = contr.matrix)
efit <- eBayes(fit_contrast, robust = TRUE)
results_efit<- decideTests(efit, p.value = 0.05)
summary_efit <- summary(results_efit)
v <- voom(dge_all, design, plot =TRUE)
v <- voomWithQualityWeights(dge_all, design, plot =TRUE)
v <- voom(dge_all, design, plot =TRUE)
fit <- lmFit(v)
fit_contrast <- contrasts.fit(fit, contrasts = contr.matrix)
efit <- eBayes(fit_contrast, robust = TRUE)
results_efit<- decideTests(efit, p.value = 0.05)
summary_efit <- summary(results_efit)
v <- voom(dge_all, design, plot = TRUE)
v <- voom(dge, design, plot = TRUE)
v <- voom(dge_all, design, plot = TRUE)
?voom
v <- voomLmFit(dge_all, design, plot = TRUE)
v <- voom(dge_all, design)
v <- voom(dge_all, design)
fit <- lmFit(v)
fit_contrast <- contrasts.fit(fit, contrasts = contr.matrix)
efit <- eBayes(fit_contrast, robust = TRUE)
plotSA(efit)
?treat
results_efit<- decideTests(efit, p.value = 0.05)
summary_efit <- summary(results_efit)
v <- voom(dge_all, design)
fit <- lmFit(v)
fit_contrast <- contrasts.fit(fit, contrasts = contr.matrix)
efit <- eBayes(fit_contrast, robust = TRUE)
results_efit<- decideTests(efit, p.value = 0.05)
summary_efit <- summary(results_efit)
summary_efit
tfit <- treat(efit)
results_efit<- decideTests(tfit, p.value = 0.05)
summary_efit <- summary(results_efit)
summary_efit
library(ggrepel)
library(tidyverse)
de_results_DvCinGab <- topTable(efit, coef = 1, sort.by = "P", n = Inf)
de_genes_toptable_DvCinGab <- topTable(efit, coef = 1, sort.by = "P", n = Inf, p.value = 0.05)
de_results_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
ggplot(aes(AveExpr, logFC, col = DE)) +
geom_point(shape = 1, size = 1) +
geom_text_repel(data = de_genes_toptable_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
rownames_to_column(), aes(label = rowname)) +
theme_bw() +
xlab("Average log-expression") +
ylab("Log-fold-change") +
ggtitle("DKD vs Normal in abnormal glomerulus (limma-voom)") +
scale_color_manual(values = c("blue","gray","red")) +
theme(text = element_text(size=15))
de_results_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
ggplot(aes(logFC, -log10(adj.P.Val), col = DE)) +
geom_point(shape = 1, size = 1) +
geom_text_repel(data = de_genes_toptable_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
rownames_to_column(), aes(label = rowname)) +
theme_bw() +
xlab("Fold change (log2)") +
ylab("-log10(p-value)") +
ggtitle("DKD vs Normal in abnormal glomerulus (limma-voom)") +
scale_color_manual(values = c("blue","gray","red")) +
theme(text = element_text(size=15))
updn_cols <- c(RColorBrewer::brewer.pal(6, 'Greens')[2], RColorBrewer::brewer.pal(6, 'Purples')[2])
de_genes_toptable_DvCinGab %>%
dplyr::select(c("logFC", "AveExpr", "P.Value", "adj.P.Val")) %>%
DT::datatable(caption = 'Differentially expressed genes. DKD vs Normal in abnormal glomerulus (limma-voom)') %>%
DT::formatStyle('logFC',
valueColumns = 'logFC',
backgroundColor = DT::styleInterval(0, rev(updn_cols))) %>%
DT::formatSignif(1:4, digits = 4)
library(ggrepel)
library(tidyverse)
de_results_DvCinGab <- topTable(efit, coef = 1, sort.by = "P", n = Inf)
de_genes_toptable_DvCinGab <- topTable(efit, coef = 1, sort.by = "P", n = Inf, p.value = 0.05)
de_results_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
ggplot(aes(AveExpr, logFC, col = DE)) +
geom_point(shape = 1, size = 1) +
geom_text_repel(data = de_genes_toptable_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
rownames_to_column(), aes(label = rowname)) +
theme_bw() +
xlab("Average log-expression") +
ylab("Log-fold-change") +
ggtitle("Abnormal glomerulus vs. Tubule neg in DKD patients (limma-voom-treat)") +
scale_color_manual(values = c("blue","gray","red")) +
theme(text = element_text(size=15))
de_results_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
ggplot(aes(logFC, -log10(adj.P.Val), col = DE)) +
geom_point(shape = 1, size = 1) +
geom_text_repel(data = de_genes_toptable_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
rownames_to_column(), aes(label = rowname)) +
theme_bw() +
xlab("Fold change (log2)") +
ylab("-log10(p-value)") +
ggtitle("Abnormal glomerulus vs. Tubule neg in DKD patients (limma-voom-treat)") +
scale_color_manual(values = c("blue","gray","red")) +
theme(text = element_text(size=15))
updn_cols <- c(RColorBrewer::brewer.pal(6, 'Greens')[2], RColorBrewer::brewer.pal(6, 'Purples')[2])
de_genes_toptable_DvCinGab %>%
dplyr::select(c("logFC", "AveExpr", "P.Value", "adj.P.Val")) %>%
DT::datatable(caption = 'Abnormal glomerulus vs. Tubule neg in DKD patients (limma-voom-treat)') %>%
DT::formatStyle('logFC',
valueColumns = 'logFC',
backgroundColor = DT::styleInterval(0, rev(updn_cols))) %>%
DT::formatSignif(1:4, digits = 4)
?duplicateCorrelation
library(ggrepel)
library(tidyverse)
de_results_DvCinGab <- topTable(efit, coef = 1, sort.by = "P", n = Inf)
de_genes_toptable_DvCinGab <- topTable(efit, coef = 1, sort.by = "P", n = Inf, p.value = 0.05)
de_results_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
ggplot(aes(AveExpr, logFC, col = DE)) +
geom_point(shape = 1, size = 1) +
geom_text_repel(data = de_genes_toptable_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
rownames_to_column(), aes(label = rowname)) +
theme_bw() +
xlab("Average log-expression") +
ylab("Log-fold-change") +
ggtitle("Abnormal glomerulus vs. Tubule neg in DKD patients (limma-voom-treat)") +
scale_color_manual(values = c("blue","gray","red")) +
theme(text = element_text(size=15))
de_results_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
ggplot(aes(logFC, -log10(adj.P.Val), col = DE)) +
geom_point(shape = 1, size = 1) +
geom_text_repel(data = de_genes_toptable_DvCinGab %>%
mutate(DE = ifelse(logFC > 0 & adj.P.Val <0.05, "UP",
ifelse(logFC <0 & adj.P.Val<0.05, "DOWN", "NOT DE"))) %>%
rownames_to_column(), aes(label = rowname)) +
theme_bw() +
xlab("Fold change (log2)") +
ylab("-log10(p-value)") +
ggtitle("Abnormal glomerulus vs. Tubule neg in DKD patients (limma-voom-treat)") +
scale_color_manual(values = c("blue","gray","red")) +
theme(text = element_text(size=15))
library(DT)
updn_cols <- c(RColorBrewer::brewer.pal(6, 'Greens')[2], RColorBrewer::brewer.pal(6, 'Purples')[2])
de_genes_toptable_DvCinGab %>%
dplyr::select(c("logFC", "AveExpr", "P.Value", "adj.P.Val")) %>%
DT::datatable(caption = 'Abnormal glomerulus vs. Tubule neg in DKD patients (limma-voom-treat)') %>%
DT::formatStyle('logFC',
valueColumns = 'logFC',
backgroundColor = DT::styleInterval(0, rev(updn_cols))) %>%
DT::formatSignif(1:4, digits = 4)
library(msigdb)
library(GSEABase)
msigdb_hs <- getMsigdb(version = '7.2')
msigdb_hs <- appendKEGG(msigdb_hs)
sc <- listSubCollections(msigdb_hs)
gsc <- c(subsetCollection(msigdb_hs, c('h')),
subsetCollection(msigdb_hs, 'c2', sc[grepl("^CP:",sc)]),
subsetCollection(msigdb_hs, 'c5', sc[grepl("^GO:",sc)])) %>%
GeneSetCollection()
gsc
gsc@.Data
collectionType(gsc)
class(gsc)
names(gsc)
gsc
length(gsc)
subsetCollection(gsc)
fry_indices <- ids2indices(lapply(gsc, geneIds), rownames(v), remove.empty = FALSE)
fry_indices
names(fry_indices) <- sapply(gsc, setName)
fry_indices
rownames(v)
gsc_category <- sapply(gsc, function(x) bcCategory(collectionType(x)))
gsc_category
gsc_subcategory <- sapply(gsc, function(x) bcSubCategory(collectionType(x)))
gsc_subcategory <- gsc_subcategory[sapply(fry_indices, length) > 5]
fry_indices <- fry_indices[sapply(fry_indices, length) > 5]
names(gsc_category) = names(gsc_subcategory) = names(fry_indices)
gsc_category
gsc_subcategory
fry_indices_cat <- split(fry_indices, gsc_category[names(fry_indices)])
fry_res_out <- lapply(fry_indices_cat, function (x) {
limma::fry(v, index = x, design = design, contrast = contr.matrix[,1], robust = TRUE)
})
post_fry_format <- function(fry_output, gsc_category, gsc_subcategory){
names(fry_output) <- NULL
fry_output <- do.call(rbind, fry_output)
fry_output$GenesetName <- rownames(fry_output)
fry_output$GenesetCat <- gsc_category[rownames(fry_output)]
fry_output$GenesetSubCat <- gsc_subcategory[rownames(fry_output)]
return(fry_output)
}
fry_res_sig <- post_fry_format(fry_res_out, gsc_category, gsc_subcategory) %>%
as.data.frame() %>%
filter(FDR < 0.05)
?fry
fry_res_sig
datatable(fry_res_sig)
fry_res_sig
fry_res_sig %>% colnames()
datatable(fry_res_sig[,c("NGenes","Direction","FDR","GenesetSubCat")])
fry_res_sig %>% dim()
dim(fry_res_sig)
fry_res_sig %>%
arrange(FDR)
fry_res_sig %>%
arrange(FDR) %>%
.[,seq(20)]
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),]
colnames(fry_res_sig)
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, FDR, color = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, FDR, fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),]
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, -log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, -log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, -log2(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, -log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw() +
coord_flip()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
ggplot(aes(GenesetName, -log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw() +
coord_flip()
fry_res_sig %>%
arrange(FDR) %>%
.[seq(20),] %>%
mutate(GenesetName = factor(GenesetName, levels = .$GenesetName)) %>%
ggplot(aes(GenesetName, -log(FDR), fill = Direction)) +
geom_bar(stat = "identity") +
theme_bw() +
coord_flip()
coldata(spe)$regions %>% unique()
colData(spe)$regions %>% unique()
library(vissE)
library(igraph)
dovissE <- function(fry_out, de_table, topN = 6, title = "", specific_clusters = NA){
n_row = min(1000, nrow(fry_out))
gs_sig_name <- fry_out %>%
filter(FDR < 0.05) %>%
arrange(FDR) %>%
.[1:n_row,] %>%
rownames()
gsc_sig <- gsc[gs_sig_name,]
gs_ovlap <- computeMsigOverlap(gsc_sig, thresh = 0.15)
gs_ovnet <- computeMsigNetwork(gs_ovlap, gsc)
gs_stats <- -log10(fry_out[gs_sig_name,]$FDR)
names(gs_stats) <- gs_sig_name
#identify clusters
grps = cluster_walktrap(gs_ovnet)
#extract clustering results
grps = groups(grps)
#sort by cluster size
grps = grps[order(sapply(grps, length), decreasing = TRUE)]
# write output
output_clusters <- list()
for(i in seq(length(grps))){
output_clusters[[i]] <- data.frame(geneset = grps[[i]], cluster = paste0("cluster",names(grps)[i]))
}
output_clusters <<- output_clusters %>% bind_rows()
if(is.na(specific_clusters)){
grps <- grps[1:topN]
} else {
grps <- grps[specific_clusters %>% as.character()]
}
#plot the top 12 clusters
set.seed(36) #set seed for reproducible layout
p1 <<- plotMsigNetwork(gs_ovnet, markGroups = grps,
genesetStat = gs_stats, rmUnmarkedGroups = TRUE) +
scico::scale_fill_scico(name = "-log10(FDR)")
p2 <<- plotMsigWordcloud(gsc, grps, type = 'Name')
genes <- unique(unlist(geneIds(gsc_sig)))
genes_logfc <- de_table %>% rownames_to_column() %>% filter(rowname %in% genes) %>% .$logFC
names(genes_logfc) <- de_table %>% rownames_to_column() %>% filter(rowname %in% genes) %>% .$rowname
p3 <<- plotGeneStats(genes_logfc, gsc, grps) +
geom_hline(yintercept = 0, colour = 2, lty = 2) +
ylab("logFC")
#p4 <- plotMsigPPI(ppi, gsc, grps[1:topN], geneStat = genes_logfc) +
#  guides(col=guide_legend(title="logFC"))
print(p2 + p1 + p3 + patchwork::plot_layout(ncol = 3) +
patchwork::plot_annotation(title = title))
}
dovissE(fry_res_sig, de_genes_toptable_DvCinGab, title = "Abnormal glomerulus vs. Tubule neg in DKD patients" )
dovissE(fry_res_sig, de_genes_toptable_DvCinGab, topN = 9, title = "Abnormal glomerulus vs. Tubule neg in DKD patients" )
57.6/86.4
![flowchart](../figures/workflow.jpg "GeoMX data analysis")
